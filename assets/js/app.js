angular.module("app",[]),angular.module("app").controller("LlibresController",["$scope","LlibresService",function(i,l){l.fetch().success(function(l){i.llibres=l}).error(function(i){console.log(i)}),i.afegirLlibre=function(){void 0!=i.llibreTitol&void 0!=i.llibreIsbn&&l.create({titol:i.llibreTitol,isbn:i.llibreIsbn}).success(function(l){i.llibres.unshift(l),i.llibreIsbn=null,i.llibreTitol=null})},i.borrarLlibre=function(e){l["delete"](e.isbn).success(function(){i.llibres.splice(i.llibres.indexOf(e),1)})},i.cancelarLlibre=function(){void 0!=i.llibreTitol&void 0!=i.llibreIsbn&&(i.llibreIsbn=null,i.llibreTitol=null)},i.cancelarEdicio=function(){void 0!=i.editarTitol&void 0!=i.editarIsbn&&(i.editarIsbn=null,i.editarTitol=null)},i.editarLlibre=function(l){i.editarTitol=l.titol,i.editarIsbn=l.isbn,i.llibre_Editar=l},i.actualitzarLlibre=function(){void 0!=i.editarTitol&void 0!=i.editarIsbn&&l.update(i.llibre_Editar.isbn,{titol:i.editarTitol,isbn:i.editarIsbn}).success(function(){i.llibre_Editar.isbn=i.editarIsbn,i.llibre_Editar.titol=i.editarTitol,i.editarIsbn=null,i.editarTitol=null})}}]),angular.module("app").service("LlibresService",["$http",function(i){this.fetch=function(){return i.get("/api/llibres")},this.create=function(l){return i.post("/api/llibres",l)},this["delete"]=function(l){return i["delete"]("/api/llibres/"+l)},this.update=function(l,e){return i.put("/api/llibres/"+l,e)}}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZS5qcyIsImxsaWJyZS5jdHJsLmpzIiwibGxpYnJlLnN2Yy5qcyJdLCJuYW1lcyI6WyJhbmd1bGFyIiwibW9kdWxlIiwiY29udHJvbGxlciIsIiRzY29wZSIsIkxsaWJyZXNTZXJ2aWNlIiwiZmV0Y2giLCJzdWNjZXNzIiwibGxpYnJlcyIsImVycm9yIiwiZSIsImNvbnNvbGUiLCJsb2ciLCJhZmVnaXJMbGlicmUiLCJ1bmRlZmluZWQiLCJsbGlicmVUaXRvbCIsImxsaWJyZUlzYm4iLCJjcmVhdGUiLCJ0aXRvbCIsImlzYm4iLCJsbGlicmUiLCJ1bnNoaWZ0IiwiYm9ycmFyTGxpYnJlIiwic3BsaWNlIiwiaW5kZXhPZiIsImNhbmNlbGFyTGxpYnJlIiwiY2FuY2VsYXJFZGljaW8iLCJlZGl0YXJUaXRvbCIsImVkaXRhcklzYm4iLCJlZGl0YXJMbGlicmUiLCJsbGlicmVfRWRpdGFyIiwiYWN0dWFsaXR6YXJMbGlicmUiLCJ1cGRhdGUiLCJzZXJ2aWNlIiwiJGh0dHAiLCJ0aGlzIiwiZ2V0IiwicG9zdCIsInB1dCJdLCJtYXBwaW5ncyI6IkFBQUFBLFFBQUFDLE9BQUEsVUNBQUQsUUFBQUMsT0FBQSxPQUNBQyxXQUFBLHFCQUFBLFNBQUEsaUJBQUEsU0FBQUMsRUFBQUMsR0FDQUEsRUFBQUMsUUFDQUMsUUFBQSxTQUFBQyxHQUNBSixFQUFBSSxRQUFBQSxJQUVBQyxNQUFBLFNBQUFDLEdBQ0FDLFFBQUFDLElBQUFGLEtBR0FOLEVBQUFTLGFBQUEsV0FFQUMsUUFBQVYsRUFBQVcsWUFBQUQsUUFBQVYsRUFBQVksWUFFQVgsRUFBQVksUUFDQUMsTUFBQWQsRUFBQVcsWUFDQUksS0FBQWYsRUFBQVksYUFDQVQsUUFBQSxTQUFBYSxHQUNBaEIsRUFBQUksUUFBQWEsUUFBQUQsR0FDQWhCLEVBQUFZLFdBQUEsS0FDQVosRUFBQVcsWUFBQSxRQU1BWCxFQUFBa0IsYUFBQSxTQUFBRixHQUVBZixFQUFBQSxVQUFBZSxFQUFBRCxNQUNBWixRQUFBLFdBQ0FILEVBQUFJLFFBQUFlLE9BQUFuQixFQUFBSSxRQUFBZ0IsUUFBQUosR0FBQSxNQU1BaEIsRUFBQXFCLGVBQUEsV0FFQVgsUUFBQVYsRUFBQVcsWUFBQUQsUUFBQVYsRUFBQVksYUFFQVosRUFBQVksV0FBQSxLQUNBWixFQUFBVyxZQUFBLE9BTUFYLEVBQUFzQixlQUFBLFdBRUFaLFFBQUFWLEVBQUF1QixZQUFBYixRQUFBVixFQUFBd0IsYUFFQXhCLEVBQUF3QixXQUFBLEtBQ0F4QixFQUFBdUIsWUFBQSxPQU1BdkIsRUFBQXlCLGFBQUEsU0FBQVQsR0FFQWhCLEVBQUF1QixZQUFBUCxFQUFBRixNQUNBZCxFQUFBd0IsV0FBQVIsRUFBQUQsS0FFQWYsRUFBQTBCLGNBQUFWLEdBT0FoQixFQUFBMkIsa0JBQUEsV0FFQWpCLFFBQUFWLEVBQUF1QixZQUFBYixRQUFBVixFQUFBd0IsWUFFQXZCLEVBQUEyQixPQUFBNUIsRUFBQTBCLGNBQUFYLE1BQ0FELE1BQUFkLEVBQUF1QixZQUNBUixLQUFBZixFQUFBd0IsYUFFQXJCLFFBQUEsV0FDQUgsRUFBQTBCLGNBQUFYLEtBQUFmLEVBQUF3QixXQUNBeEIsRUFBQTBCLGNBQUFaLE1BQUFkLEVBQUF1QixZQUVBdkIsRUFBQXdCLFdBQUEsS0FDQXhCLEVBQUF1QixZQUFBLFdDbkZBMUIsUUFBQUMsT0FBQSxPQUNBK0IsUUFBQSxrQkFBQSxRQUFBLFNBQUFDLEdBQ0FDLEtBQUE3QixNQUFBLFdBQ0EsTUFBQTRCLEdBQUFFLElBQUEsaUJBRUFELEtBQUFsQixPQUFBLFNBQUFHLEdBQ0EsTUFBQWMsR0FBQUcsS0FBQSxlQUFBakIsSUFFQWUsS0FBQUEsVUFBQSxTQUFBaEIsR0FDQSxNQUFBZSxHQUFBQSxVQUFBLGdCQUFBZixJQUdBZ0IsS0FBQUgsT0FBQSxTQUFBYixFQUFBQyxHQUNBLE1BQUFjLEdBQUFJLElBQUEsZ0JBQUFuQixFQUFBQyIsImZpbGUiOiJhcHAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJhbmd1bGFyLm1vZHVsZSgnYXBwJywgW10pOyIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLmNvbnRyb2xsZXIoJ0xsaWJyZXNDb250cm9sbGVyJywgZnVuY3Rpb24oJHNjb3BlLCBMbGlicmVzU2VydmljZSkge1xuICAgIExsaWJyZXNTZXJ2aWNlLmZldGNoKClcbiAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24obGxpYnJlcykge1xuICAgICAgICAgICAgJHNjb3BlLmxsaWJyZXMgPSBsbGlicmVzO1xuICAgICAgICB9KVxuICAgICAgICAuZXJyb3IoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coZSk7XG4gICAgICAgIH0pO1xuICAgIC8vRGVzZW52b2x1cGVtIGxhIGZ1bmNpbyBhZmVnaXJMbGlicmVcbiAgICAkc2NvcGUuYWZlZ2lyTGxpYnJlID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgaWYgKCgkc2NvcGUubGxpYnJlVGl0b2wgIT0gdW5kZWZpbmVkKSAmICgkc2NvcGUubGxpYnJlSXNibiAhPSB1bmRlZmluZWQpKSB7XG5cbiAgICAgICAgICAgIExsaWJyZXNTZXJ2aWNlLmNyZWF0ZSh7XG4gICAgICAgICAgICAgICAgXCJ0aXRvbFwiOiAkc2NvcGUubGxpYnJlVGl0b2wsXG4gICAgICAgICAgICAgICAgXCJpc2JuXCI6ICRzY29wZS5sbGlicmVJc2JuXG4gICAgICAgICAgICB9KS5zdWNjZXNzKGZ1bmN0aW9uKGxsaWJyZSkge1xuICAgICAgICAgICAgICAgICRzY29wZS5sbGlicmVzLnVuc2hpZnQobGxpYnJlKTtcbiAgICAgICAgICAgICAgICAkc2NvcGUubGxpYnJlSXNibiA9IG51bGw7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmxsaWJyZVRpdG9sID0gbnVsbDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgICAvL0Rlc2Vudm9sdXBlbSBsYSBmdW5jaW8gZXNib3JyYXIgbGxpYnJlXG4gICAgJHNjb3BlLmJvcnJhckxsaWJyZSA9IGZ1bmN0aW9uKGxsaWJyZSkge1xuXG4gICAgICAgIExsaWJyZXNTZXJ2aWNlLmRlbGV0ZShsbGlicmUuaXNibilcbiAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICRzY29wZS5sbGlicmVzLnNwbGljZSgkc2NvcGUubGxpYnJlcy5pbmRleE9mKGxsaWJyZSksIDEpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICB9O1xuICAgIFxuICAgIC8vQ2FuY2VsZW0gbCdhY2Npw7MgUE9TVFxuICAgICRzY29wZS5jYW5jZWxhckxsaWJyZSA9IGZ1bmN0aW9uKGxsaWJyZSkge1xuXG4gICAgICAgIGlmICgoJHNjb3BlLmxsaWJyZVRpdG9sICE9IHVuZGVmaW5lZCkgJiAoJHNjb3BlLmxsaWJyZUlzYm4gIT0gdW5kZWZpbmVkKSkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAkc2NvcGUubGxpYnJlSXNibiA9IG51bGw7XG4gICAgICAgICAgICAkc2NvcGUubGxpYnJlVGl0b2wgPSBudWxsOyBcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgfTtcbiAgICBcbiAgICAvL0NhbmNlbGVtIGwnYWNjacOzIFBVVFxuICAgICRzY29wZS5jYW5jZWxhckVkaWNpbyA9IGZ1bmN0aW9uKGxsaWJyZSkge1xuXG4gICAgICAgIGlmICgoJHNjb3BlLmVkaXRhclRpdG9sICE9IHVuZGVmaW5lZCkgJiAoJHNjb3BlLmVkaXRhcklzYm4gIT0gdW5kZWZpbmVkKSkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAkc2NvcGUuZWRpdGFySXNibiA9IG51bGw7XG4gICAgICAgICAgICAkc2NvcGUuZWRpdGFyVGl0b2wgPSBudWxsOyBcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8vIFRyYXNwYXNzZW0gaW5mb3JtYWNpw7MgYSBsZXMgdmFyaWFibGVzIGRlbCBIVE1MXG4gICAgJHNjb3BlLmVkaXRhckxsaWJyZSA9IGZ1bmN0aW9uKGxsaWJyZSkge1xuXG4gICAgICAgICRzY29wZS5lZGl0YXJUaXRvbCA9IGxsaWJyZS50aXRvbDtcbiAgICAgICAgJHNjb3BlLmVkaXRhcklzYm4gPSBsbGlicmUuaXNibjtcblxuICAgICAgICAkc2NvcGUubGxpYnJlX0VkaXRhciA9IGxsaWJyZTtcblxuXG4gICAgfTtcblxuICAgIFxuICAgIC8vIEFjdHVhbGl0emVtIGxlcyBkYWRlcyBkZWwgbGxpYnJlIGEgZWRpdGFyXG4gICAgJHNjb3BlLmFjdHVhbGl0emFyTGxpYnJlID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgaWYgKCgkc2NvcGUuZWRpdGFyVGl0b2wgIT0gdW5kZWZpbmVkKSAmICgkc2NvcGUuZWRpdGFySXNibiAhPSB1bmRlZmluZWQpKSB7XG5cbiAgICAgICAgICAgIExsaWJyZXNTZXJ2aWNlLnVwZGF0ZSgkc2NvcGUubGxpYnJlX0VkaXRhci5pc2JuLCB7XG4gICAgICAgICAgICAgICAgICAgIFwidGl0b2xcIjogJHNjb3BlLmVkaXRhclRpdG9sLFxuICAgICAgICAgICAgICAgICAgICBcImlzYm5cIjogJHNjb3BlLmVkaXRhcklzYm5cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubGxpYnJlX0VkaXRhci5pc2JuID0gJHNjb3BlLmVkaXRhcklzYm47XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5sbGlicmVfRWRpdGFyLnRpdG9sID0gJHNjb3BlLmVkaXRhclRpdG9sO1xuICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZWRpdGFySXNibiA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5lZGl0YXJUaXRvbCA9IG51bGw7IFxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG59KTsiLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5zZXJ2aWNlKFwiTGxpYnJlc1NlcnZpY2VcIiwgZnVuY3Rpb24oJGh0dHApIHtcbiAgICB0aGlzLmZldGNoID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiAkaHR0cC5nZXQoXCIvYXBpL2xsaWJyZXNcIik7XG4gICAgfTtcbiAgICB0aGlzLmNyZWF0ZSA9IGZ1bmN0aW9uKGxsaWJyZSkge1xuICAgICAgICByZXR1cm4gJGh0dHAucG9zdChcIi9hcGkvbGxpYnJlc1wiLCBsbGlicmUpO1xuICAgIH07XG4gICAgdGhpcy5kZWxldGUgPSBmdW5jdGlvbihpc2JuKSB7XG4gICAgICAgIHJldHVybiAkaHR0cC5kZWxldGUoXCIvYXBpL2xsaWJyZXMvXCIgKyBpc2JuKTtcbiAgICB9O1xuICAgIC8vIExpIHBhc3NlbSB1biBqc29uIGkgZWwgaWQgZGVsIGxsaWJyZSBxdWUgdm9sZW0gZWRpdGFyXG4gICAgdGhpcy51cGRhdGUgPSBmdW5jdGlvbihpc2JuLCBsbGlicmUpIHtcbiAgICAgICAgcmV0dXJuICRodHRwLnB1dChcIi9hcGkvbGxpYnJlcy9cIiArIGlzYm4sIGxsaWJyZSk7XG4gICAgfTtcbn0pOyJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==